#!/usr/bin/python
import socket
import struct
import subprocess
import shlex
from pipes import quote as shquote
try:
    import json
except:
    import simplejson as json
import sys
from optparse import OptionParser

usage = \
'''Usage: %prog [--verbose|--json] hostname "request1 [args ..]" ..

If hostname is localhost, sepiida-connect is run directly. Otherwise
sepiida-connect is run on hostname using SSH.

request is one of:
 listUsers
 listServers
 listProcesses ukey
 killProcesses ukey pid
 getThumbnails ukey
 vnc ukey
 sendMessage ukey message
 logout ukey
 login server
 lockScreen ukey
 openURL ukey url
 shutdown server action=poweroff|reboot

where:
 server refers to either a server or workstation.
 ukey consists of the arguments server, client, username, display.

The port numbers returned by vnc and login refer to ports on hostname,
not on localhost. You have to forward the ports yourself.

Examples:
 sepiida-shclient localhost listUsers
 sepiida-shclient localhost \\
   "listProcesses server=ws00 client= username=user1 display=:0" 
'''

class Server(object):
    def __init__(self, hostname):
        self.hostname = hostname
        self._process = None
    def connect(self):
        if self.hostname == 'localhost':
            argv = ['sepiida-connect']
        else:
            argv = ['ssh', self.hostname, 'sepiida-connect']
        self._process = subprocess.Popen(argv, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    
    def sendRequest(self, request, args):
        req = json.dumps({'request': request, 'args': args})
        prefix = struct.pack('!I', len(req))
        self._process.stdin.write(prefix)
        self._process.stdin.write(req)
        self._process.stdin.flush()
    
    def readResponse(self, decode=True):
        prefix = self._process.stdout.read(4)
        length = struct.unpack('!I', prefix)[0]
        msg = self._process.stdout.read(length)
        if decode:
            return json.loads(msg)
        else:
            return msg
        
def main():
    parser = OptionParser(usage)
    parser.add_option('-v', '--verbose', action='store_true', dest='verbose')
    parser.add_option('', '--json', action='store_true', dest='json')
    (options, args) = parser.parse_args()
    if len(args) < 2:
        parser.error('incorrect number of arguments')
    
    s = Server(args[0])
    s.connect()
    response = s.readResponse() # read hello response, check for error
    error = response.get('error', '')
    if error: # currently only one possible error on hello, not authorized
        print >>sys.stderr, 'error: not authorized to connect to Sepiida server'
        sys.exit(1)
    
    for reqid, shrequest in enumerate(args[1:]):
        # turn 'foo arg1=bar arg2=baz' into {'request': 'foo', 'args': [ {'arg1': 'bar', 'arg2': 'baz'} ]  }
        try:
            r, shargs = shrequest.split(None, 1)
        except ValueError:
            r, shargs = shrequest, ''
        
        arg = {}
        for sharg in shlex.split(shargs):
            try:
                var, val = sharg.split('=', 1)
                arg[var] = val
            except ValueError:
                parser.error('invalid argument "%s"' % shrequest)
        
        if options.verbose:
            print r, [ arg ]
        if arg:
            s.sendRequest(r, [ arg ])
        else:
            s.sendRequest(r, [])
        
        response = s.readResponse(decode=not options.json)
        if options.verbose:
            print response
        elif options.json:
            print response
            continue
        
        if response.get('error', ''):
            print 'error_%d=%s' % (reqid, response['error'])    
        data = response['data']
        if isinstance(data, list):
            print 'data_%d_length=%d' % (reqid, len(data))
            for i, item in enumerate(data):
                if isinstance(item, dict):
                    for k, v in item.iteritems():
                        if isinstance(v, list): # flatten lists
                            try:
                                v = ' '.join(v)
                            except TypeError:
                                # listProcess has a nested [pid, process] list
                                # split it like this: "pid1 cmd1|pid2 cmd2"
                                v = '|\n'.join([ '%d %s' % (p[0], p[1].encode('utf-8', 'replace')) for p in v])
                        if isinstance(v, unicode):
                            v = v.encode('utf-8', 'replace')
                        if isinstance(k, unicode):
                            k = k.encode('utf-8', 'replace')
                        sys.stdout.write("data_%d_%d_%s=%s\n" % (reqid, i, k, shquote(str(v))))
                else:
                    raise NotImplementedError
        else:
            raise NotImplementedError
    

if __name__ == '__main__':
    main()
